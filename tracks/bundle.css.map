{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/search/ArtistQuery.svelte",
    "../src/search/SongResult.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import SongQuery from \"./search/SongQuery.svelte\";\n  import ArtistQuery from \"./search/ArtistQuery.svelte\";\n  import { searchSong, searchArtist } from \"./musixmatch.js\";\n\n  let artistNames = \"\";\n\n  let songNames = \"\";\n  let queries = [];\n\n  let selection = {};\n  let count = 0;\n\n  function searchSongs() {\n    songNames\n      .trim()\n      .split(\"\\n\")\n      .forEach(q => {\n        searchSong({\n          q_track_artist: q.replace(/ *\\([^)]*\\) */g, \"\"),\n          page_size: 5,\n          page: 1,\n          s_track_rating: \"desc\"\n        }).then(function(tracks) {\n          queries = [\n            ...queries,\n            {\n              q: q,\n              type: \"song\",\n              songs: tracks.map(e => e.track),\n              selected: -1\n            }\n          ];\n        });\n      });\n    songNames = \"\";\n  }\n\n  function searchArtists() {\n    artistNames\n      .trim()\n      .split(\"\\n\")\n      .forEach(q => {\n        searchArtist({\n          q_artist: q.replace(/ *\\([^)]*\\) */g, \"\"),\n          page_size: 5,\n          page: 1\n        }).then(function(artists) {\n          queries = [\n            ...queries,\n            {\n              q: q,\n              type: \"artist\",\n              artists: artists.map(e => e.artist)\n            }\n          ];\n        });\n      });\n    artistNames = \"\";\n  }\n\n  function handleSelection(event) {\n    if (event.detail.track == -1) {\n      delete selection[event.detail.query_index];\n    } else {\n      selection[event.detail.query_index] = {\n        id: event.detail.track,\n        title: event.detail.title,\n        artist: event.detail.artist\n      };\n    }\n    count = Object.keys(selection).length;\n  }\n\n  function exportTrackList() {\n    let text = \"id\\ttitle\\tartist\\t\\n\";\n    let trackIds = [];\n    for (let key in selection) {\n      if (selection.hasOwnProperty(key)) {\n        const e = selection[key];\n        text += e.id + \"\\t\";\n        text += e.title + \"\\t\";\n        text += e.artist + \"\\n\";\n\n        trackIds.push(e.id);\n      }\n    }\n    window.prompt(\"Track IDs for script:\", trackIds.join(\",\"));\n    window.open(\n      \"data:text/csv;charset=utf-8,\" + encodeURIComponent(text),\n      \"_blank\"\n    );\n  }\n</script>\n\n<style>\n  textarea {\n    display: block;\n    width: 400px;\n    min-height: 100px;\n    margin-top: 1em;\n  }\n</style>\n\n<h1>Export IDs</h1>\n\n<form on:submit|preventDefault={searchSongs}>\n  <h2>Song Title</h2>\n  You can enter more than one title on separate lines for bulk searches:\n  <textarea bind:value={songNames} />\n  <button type=\"submit\">Suggest titles</button>\n</form>\n\n<form on:submit|preventDefault={searchArtists}>\n  <h2>Artist</h2>\n  You can enter more than one artist on separate lines for bulk searches:\n  <textarea bind:value={artistNames} />\n  <button type=\"submit\">Suggest artists</button>\n</form>\n\n{#each queries as q, qid (q)}\n  <div>\n    <h3>{q.q}</h3>\n\n    {#if q.type == 'song'}\n      <SongQuery on:select={handleSelection} q={q.q} {qid} songs={q.songs} />\n    {:else}\n      <ArtistQuery on:select={handleSelection} artists={q.artists} {qid} />\n    {/if}\n  </div>\n{/each}\n\n{#if queries.length > 0}\n  <button on:click={exportTrackList}>\n    Export {count} selected {count == 1 ? 'song' : 'songs'}\n  </button>\n{/if}\n",
    "<script>\n  import SongResult from \"./SongResult.svelte\";\n  import { findAlbums, albumTracks } from \"../musixmatch.js\";\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let artists, qid;\n  let selected = -1,\n    lastSelected = -1;\n  let albums = [],\n    selected_albums = [];\n\n  function flag(country) {\n    if (!country) return \"🏳️\";\n\n    // https://medium.com/binary-passion/lets-turn-an-iso-country-code-into-a-unicode-emoji-shall-we-870c16e05aad\n    return country\n      .toUpperCase()\n      .replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + 127397));\n  }\n\n  $: if (lastSelected != selected) {\n    lastSelected = selected;\n    albums = [];\n    findAlbums({\n      artist_id: selected,\n      page_size: 10,\n      s_release_date: \"desc\"\n    }).then(function(more) {\n      if (!more) return;\n      albums = [\n        ...albums,\n        ...more.map(e => ({\n          ...e.album,\n          songs: []\n        }))\n      ];\n    });\n  }\n\n  function albumChange(event) {\n    if (event.target.checked) {\n      albums.forEach(a => {\n        if (a.album_id == parseInt(event.target.value)) {\n          // found it\n          if (a.songs.length > 0) return;\n          albumTracks({\n            album_id: a.album_id,\n            page_size: 100,\n            f_has_lyrics: true\n          }).then(function(more) {\n            if (!more) return;\n            a.songs = [...a.songs, ...more.map(e => e.track)];\n            albums = albums; // ugh\n\n            more\n              .map(e => e.track)\n              .forEach(t => {\n                dispatch(\"select\", {\n                  track: t.track_id,\n                  query_index: a.album_id + \"-\" + t.track_id,\n                  title: t.track_name,\n                  artist: t.artist_name\n                });\n              });\n          });\n          return;\n        }\n      });\n    }\n  }\n</script>\n\n<style>\n  .songs {\n    margin-left: 1em;\n  }\n</style>\n\n{#each artists as a}\n  <div>\n    <input\n      type=\"radio\"\n      value={a.artist_id}\n      name=\"q{qid}\"\n      id=\"{qid}-{a.artist_id}\"\n      bind:group={selected} />\n    <a href=\"https://www.musixmatch.com/artist/{a.artist_id}\" target=\"_blank\">\n      {a.artist_name}\n    </a>\n    {flag(a.artist_country)}\n    {#if a.artist_alias_list.length > 0}\n      <em>\n        (also known as {a.artist_alias_list\n          .map(e => e.artist_alias)\n          .join(', ')})\n      </em>\n    {/if}\n  </div>\n{/each}\n{#if selected > -1}\n  <h4>Albums ({selected})</h4>\n  {#each albums as album}\n    <label for=\"a{album.album_id}\">\n      <input\n        type=\"checkbox\"\n        id=\"a{album.album_id}\"\n        on:change={albumChange}\n        bind:group={selected_albums}\n        value={album.album_id} />\n      {album.album_name}\n    </label>\n    <div class=\"songs\">\n      {#if album.songs.length > 0}\n        {#each album.songs as song, i}\n          <SongResult\n            {i}\n            {song}\n            album={true}\n            qid=\"{album.album_id}-{song.track_id}\"\n            on:select />\n        {/each}\n      {/if}\n    </div>\n  {/each}\n{/if}\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let song, i, qid;\n  export let album = false;\n\n  let {\n    track_id,\n    track_name,\n    artist_name,\n    album_name,\n    has_lyrics,\n    track_share_url\n  } = song;\n\n  function changed(e) {\n    if (e.target.checked) {\n      dispatch(\"select\", {\n        track: track_id,\n        query_index: qid,\n        title: track_name,\n        artist: artist_name\n      });\n    } else {\n      dispatch(\"select\", {\n        track: -1,\n        query_index: qid\n      });\n    }\n  }\n</script>\n\n<style>\n  .red {\n    color: red;\n  }\n\n  .faded {\n    opacity: 0.5;\n  }\n</style>\n\n<label for=\"t{track_id}\" class:faded={has_lyrics == 0}>\n  <input\n    type={album ? 'checkbox' : 'radio'}\n    value={i}\n    name=\"q{qid}\"\n    id=\"t{track_id}\"\n    disabled={has_lyrics == 0}\n    checked={album}\n    on:change={changed} />\n  <strong>{track_name}</strong>\n  by {artist_name}\n  {#if has_lyrics == 0}\n    <span class=\"red\">No lyrics available</span>\n  {:else}\n    <a href={track_share_url} target=\"_blank\">View lyrics</a>\n  {/if}\n</label>\n"
  ],
  "names": [],
  "mappings": "AAgGE,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,GAAG,AACjB,CAAC;AC3BD,MAAM,cAAC,CAAC,AACN,WAAW,CAAE,GAAG,AAClB,CAAC;AC1CD,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,GAAG,AACZ,CAAC,AAED,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,GAAG,AACd,CAAC"
}